with(subset(Cars93,
DriveTrain=="Rear"), points(Price, MPG.city, col="firebrick", pch=17))
with(subset(Cars93,
DriveTrain=="4WD"), points(Price, MPG.city, col="black", pch=8))
legend("topright",legend = c("Front","Rear","4WD"), col=c("orange","firebrick","black"), pch=c(19,17,8), bty="n")
with(Cars93,
plot(Price, MPG.city, xlab="Price", ylab="MPG in City"))
with(subset(Cars93,
DriveTrain=="Front"), points(Price, MPG.city, col="orange", pch=19))
with(subset(Cars93,
DriveTrain=="Rear"), points(Price, MPG.city, col="firebrick", pch=17))
with(subset(Cars93,
DriveTrain=="4WD"), points(Price, MPG.city, col="black", pch=8))
legend("topright",
legend = c("Front","Rear","4WD"), col=c("orange","firebrick","black"), pch=c(19,17,8), bty="n")
with(Cars93,
plot(Price, MPG.city, xlab="Price", ylab="MPG in City",type='n'))
with(subset(Cars93,
DriveTrain=="Front"), points(Price, MPG.city, col="orange", pch=19))
with(subset(Cars93,
DriveTrain=="Rear"), points(Price, MPG.city, col="firebrick", pch=17))
with(subset(Cars93,
DriveTrain=="4WD"), points(Price, MPG.city, col="black", pch=8))
legend("topright",
legend = c("Front","Rear","4WD"), col=c("orange","firebrick","black"), pch=c(19,17,8), bty="n")
fit1 <- with(subset(Cars93, DriveTrain =="Front"), lm(MPG.city~Price))
fit2 <- with(subset(Cars93, DriveTrain =="Rear"), lm(MPG.city~Price))
fit3 <- with(subset(Cars93, DriveTrain =="4WD"), lm(MPG.city~Price))
fit1 <- with(subset(Cars93, DriveTrain =="Front"), lm(MPG.city~Price))
fit2 <- with(subset(Cars93, DriveTrain =="Rear"), lm(MPG.city~Price))
fit3 <- with(subset(Cars93, DriveTrain =="4WD"), lm(MPG.city~Price))
xx1 <- subset(Cars93, DriveTrain=='Front')$Price
yy1 <- fit1$coef[1]+fit1$coef[2]*xx1
xx2 <- subset(Cars93, DriveTrain=='Rear')$Price
yy2 <- fit1$coef[1]+fit1$coef[2]*xx2
xx3 <- subset(Cars93, DriveTrain=='4WD')$Price
yy3 <- fit1$coef[1]+fit1$coef[2]*xx3
fit1 <- with(subset(Cars93, DriveTrain =="Front"), lm(MPG.city~Price))
fit2 <- with(subset(Cars93, DriveTrain =="Rear"), lm(MPG.city~Price))
fit3 <- with(subset(Cars93, DriveTrain =="4WD"), lm(MPG.city~Price))
xx1 <- subset(Cars93, DriveTrain=='Front')$Price
yy1 <- fit1$coef[1]+fit1$coef[2]*xx1
xx2 <- subset(Cars93, DriveTrain=='Rear')$Price
yy2 <- fit2$coef[1]+fit1$coef[2]*xx2
xx3 <- subset(Cars93, DriveTrain=='4WD')$Price
yy3 <- fit3$coef[1]+fit3$coef[2]*xx3
with(Car93, plot(Price, MPG.city, xlab='Price', ylab="MPG in City", type='n'))
with(subset(Cars93, DriveTrain=='Front'), points(Price, MPG.city, col='orange', pch=19))
with(subset(Cars93, DriveTrain=='Front'), points(Price, MPG.city, col='orange', pch=19))
with(subset(Cars93, DriveTrain=='Rear'), points(Price, MPG.city, col='firebrick', pch=17))
with(subset(Cars93, DriveTrain=='4WD'), points(Price, MPG.city, col='black', pch=8))
with(Cars93, plot(Price, MPG.city, xlab='Price', ylab="MPG in City", type='n'))
with(subset(Cars93, DriveTrain=='Front'), points(Price, MPG.city, col='orange', pch=19))
with(subset(Cars93, DriveTrain=='Rear'), points(Price, MPG.city, col='firebrick', pch=17))
with(subset(Cars93, DriveTrain=='4WD'), points(Price, MPG.city, col='black', pch=8))
with(Cars93, plot(Price, MPG.city, xlab='Price', ylab="MPG in City", type='n'))
with(subset(Cars93, DriveTrain=='Front'), points(Price, MPG.city, col='orange', pch=19))
with(subset(Cars93, DriveTrain=='Rear'), points(Price, MPG.city, col='firebrick', pch=17))
with(subset(Cars93, DriveTrain=='4WD'), points(Price, MPG.city, col='black', pch=8))
with(Cars93, plot(Price, MPG.city, xlab='Price', ylab="MPG in City", type='n'))
with(subset(Cars93, DriveTrain=='Front'), points(Price, MPG.city, col='orange', pch=19))
with(subset(Cars93, DriveTrain=='Rear'), points(Price, MPG.city, col='firebrick', pch=17))
with(subset(Cars93, DriveTrain=='4WD'), points(Price, MPG.city, col='black', pch=8))
legend("topright",
legend = c("Front","Rear","4WD"), col=c("orange","firebrick","black"), pch=c(19,17,8), bty="n")
lines(xx1, yy1, col='orange', lwd=2)
lines(xx2, yy2, col='firebrick', lwd=2)
lines(xx3, yy3, col='black', lwd=2)
xx2 <- subset(Cars93, DriveTrain=='Rear')$Price
yy2 <- fit2$coef[1]+fit2$coef[2]*xx2
lines(xx1, yy1, col='orange', lwd=2)
lines(xx2, yy2, col='firebrick', lwd=2)
lines(xx3, yy3, col='black', lwd=2)
par(mfrow=c(2,2))
with(subset(Cars93, DriveTrain='4WD'), plot(Price, MPG.city, col='firebrick', pcj=8), main='4WD'))
par(mfrow=c(2,2))
with(subset(Cars93, DriveTrain='Front'), plot(Price, MPG.city, col='orange', pcj=19, main='Front'))
with(subset(Cars93, DriveTrain='Rear'), plot(Price, MPG.city, col='black', pcj=17, main='Rear'))
with(subset(Cars93, DriveTrain='4WD'), plot(Price, MPG.city, col='firebrick', pcj=8, main='4WD'))
gplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~Airbags, size=l[2], xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~Airbags, size=l[2], xlab="Wheelbase", ylab="car width")
library(ggplot2)
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~Airbags, size=l[2], xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~Airbags, size=l[2], xlab="Wheelbase", ylab="car width")
library(ggplot2)
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~Airbags, xlab="Wheelbase", ylab="car width")
rlang::last_trace()
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~Airbags, size=length(2), xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=l[2], xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=I[2], xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=Length, xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=Length(2), xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=Length, xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=l(2), xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=L(2), xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=length(2), xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=Length, xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=Length, xlab="Wheelbase", ylab="car width")
head(Cars93)
head(Cars93$Type)
library(treemap)
install.packages(treemap)
install.packages("treemap")
library(treemap)
data(GNI2014)
treemap(GNI2014, index=c("continent", "iso3"), vSize = "popsulation", vColor = "GNI", type="value")
treemap(GNI2014, index=c("continent", "iso3"), vSize = "population", vColor = "GNI", type="value")
head(GNI2014)
treemap(Cars93,
index=c("Manufacturer", "Make"), vSize = "Price", vColor = "Aribags", type="categorical")
treemap(Cars93,
index=c("Manufacturer", "Make"), vSize = "Price", vColor = "AriBags", type="categorical")
treemap(Cars93,
index=c("Manufacturer", "Make"), vSize = "Price", vColor = "AirBags", type="categorical")
library(gplots)
install.packages("gplots")
library(gplots)
dt <- with(Cars93, xtabs(~AirBags+Type))
balloonplot(dt, main="Airbags by car", xlab="", ylab="", label=FALSE, show.margins = FALSE)
balloonplot(dt, main="Airbags by car", xlab="", ylab="", label=FALSE, show.margins = FALSE)
balloonplot(dt, main="Airbags by car", xlab="", ylab="", label=TRUE, show.margins = TRUE)
library(graphics)
mosaicplot(dt, color=TRUE, las=1, main="Airbags by car type")
mosaicplot(~DriveTrain + AirBags + Origin,
color=TRUE, las=1, main="DriveTrain by AirBags,Origin ", xlab="DriveTrain", data=Cars93)
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=l(2), xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags, size=L(2), xlab="Wheelbase", ylab="car width")
qplot(Wheelbase, Width, data=Cars93, shape=Type, color=Type,
facets=Origin~AirBags,size=I(2), xlab="Wheelbase", ylab="car width")
library(MASS)
install.packages("doBy")
mean_by_Type2 <- summaryBy(MPG.highway + RPM + Horsepower + Wieght + Length + Price ~ Type, data=Car93, FUN=c(mean))
library(doBy)
mean_by_Type2 <- summaryBy(MPG.highway + RPM + Horsepower + Wieght + Length + Price ~ Type, data=Car93, FUN=c(mean))
mean_by_Type2 <- summaryBy(MPG.highway + RPM + Horsepower + Wieght + Length + Price ~ Type, data=Cars93, FUN=c(mean))
mean_by_Type2 <- summaryBy(MPG.highway + RPM + Horsepower + Weight + Length + Price ~ Type, data=Cars93, FUN=c(mean))
mean_by_Type2
df2 <- mean_by_Type2(,c(2:7))
df2 <- mean_by_Type2[,c(2:7)]
df2
df_radarchart <- function(df) {
df <- data.frame(df)
dfmax <-apply(df, 2, max)
dfmin <- apply(df, 2, min)
as.data.frame(rbind(dfamx, dfmin, df))
}
mean_by_Type <- df_radarchart(df2)
df_radarchart <- function(df) {
df <- data.frame(df)
dfmax <- apply(df, 2, max)
dfmin <- apply(df, 2, min)
as.data.frame(rbind(dfamx, dfmin, df))
}
mean_by_Type <- df_radarchart(df2)
df_radarchart <- function(df) {
df <- data.frame(df)
dfmax <- apply(df, 2, max)
dfmin <- apply(df, 2, min)
as.data.frame(rbind(dfmax, dfmin, df))
}
mean_by_Type <- df_radarchart(df2)
row.names(mean_by_Type) <- c('max','min',names(table(Cars93$Type)))
mean_by_Type
row.names(mean_by_Type) <- c('max','min',names(table(Cars93$Type)))
row.names(mean_by_Type)
mean_by_Type
df2
mean_by_Type
install.packages("fmsb")
library(fmsb)
radarchart(df = mean_by_Type, #the data frame to be used to draw chart
seg=6,
pty=16,
pcol=1:6
plty=1,
radarchart(df = mean_by_Type, #the data frame to be used to draw chart
seg=6,
pty=16,
pcol=1:6,
plty=1,
plwd=2,
title = c("Radar chart by car types")
)
legend("topleft", legend = mean_by_Type2$Type, col = c(1:6), lty=1, lwd=2)
legend("topleft", legend = mean_by_Type2$Type, col = c(1:6), lty=2, lwd=2)
radarchart(df = mean_by_Type, #the data frame to be used to draw chart
seg=6, #레이더 차트의 분할 수(축을 몇 개의 세그먼트로 나눌 것인지)를 지정
pty=16, #레이더 차트의 유형
pcol=1:6, #레이더 차트의 선 색상
plty=1, #선 유형
plwd=2, #선 두께
title = c("Radar chart by car types")
)
legend("topleft", legend = mean_by_Type2$Type, col = c(1:6), lty=2, lwd=2)
legend("topleft", legend = mean_by_Type2$Type, col = c(1:5), lty=1, lwd=2)
legend("topleft", legend = mean_by_Type2$Type, col = c(1:3), lty=1, lwd=2)
legend("topleft", legend = mean_by_Type2$Type, col = c(1:6), lty=1, lwd=2)
mean_by_Type2$Type
legend("topleft", legend = mean_by_Type2$Type, col = c(1:6), lty=1, lwd=2)
dat <- Cars93(2:6, c('Price','Horsepower','Turn.circle','Rear.seat.room','Luggage.room'))
datmax <- apply(dat, 2, max)
dat <- Cars93[2:6, c('Price','Horsepower','Turn.circle','Rear.seat.room','Luggage.room')]
datmax <- apply(dat, 2, max)
datmin <- apply(dat, 2, min)
dat <- rbind(datmax, datmin, dat)
raderChart(dat, seg=5, pty=1, vlabels=c('Price','Horsepower','U-trun space\n(feet)'
,'Rear seat room\n(inches)','Luggage capacity\n(cubin feet)', title="5 segments, with specified vlabels", vlcex=0.8, pcol=rainbow[5])
,'Rear seat room\n(inches)','Luggage capacity\n(cubin feet)', title="5 segments, with specified vlabels", vlcex=0.8, pcol=rainbow[5]))
raderChart(dat, seg=5, pty=1, vlabels=c('Price','Horsepower','U-trun space\n(feet)'
,'Rear seat room\n(inches)','Luggage capacity\n(cubin feet)', title="5 segments, with specified vlabels",
vlcex=0.8, pcol=rainbow(5)))
radarchart(dat, seg=5, pty=1, vlabels=c('Price','Horsepower','U-trun space\n(feet)'
,'Rear seat room\n(inches)','Luggage capacity\n(cubin feet)', title="5 segments, with specified vlabels",
vlcex=0.8, pcol=rainbow(5)))
radarchart(dat, seg=5, pty=1, vlabels=c('Price','Horsepower','U-trun space\n(feet)'
,'Rear seat room\n(inches)','Luggage capacity\n(cubin feet)', title="5 segments, with specified vlabels",
vlcex=0.8, pcol=rainbow(5)))
radarchart(dat, seg=5, plty=1, vlabels=c('Price','Horsepower','U-trun space\n(feet)'
,'Rear seat room\n(inches)','Luggage capacity\n(cubin feet)', title="5 segments, with specified vlabels",
vlcex=0.8, pcol=rainbow(5)))
radarchart(dat, seg=5, plty=1, vlabels=c('Price','Horsepower','U-trun space\n(feet)'
,'Rear seat room\n(inches)','Luggage capacity\n(cubin feet)'), title="5 segments, with specified vlabels",
vlcex=0.8, pcol=rainbow(5))
legend("topleft", legend = Cars93(2:6,'Make'), col = rainbow(5), lty=1, lwd=1)
legend("topleft", legend = Cars93[2:6,'Make'], col = rainbow(5), lty=1, lwd=1)
Cars93[2:6,'Make']
dat
Cars93[2:6]
Cars93
Cars93[2:6]
Cars93[2:6]
library(ggplot2)
summary(diamonds)
ggplot(diamonds, aes(carat, price)) + stat_bin2d(bins = 25, colour="grey50")
ggplot(diamonds, aes(carat, price)) + stat_bin2d(bins = 40 , colour="grey50") +
scale_x_continuous(limits = c(0,6))
ggplot(diamonds, aes(carat, price)) + stat_bin2d(bins = 25, colour="grey50")
#축의 범위를 0 ~ 6까지 증가
ggplot(diamonds, aes(carat, price)) + stat_bin2d(bins = 40 , colour="grey50") +
scale_x_continuous(limits = c(0,6))
ggplot(diamonds, aes(carat, price)) + stat_bin2d(bins = 40 , colour="grey50") +
scale_x_continuous(limits = c(0,6)) + ggtitle("Price vs Carat") + theme(plot.title = element_text(hjust = 0.5))+
scale_fill_gradientn(colours = c("yellow","green","blue","red")) + labs(x ="carat", y="price")
install.packages("SwissAir")
library(SwissAir)
dim(AirQual)
with(AirQual, plot(ad.WS ~ ad.O3, xlab='03', ylab='WS'))
with(AirQual, smoothScatter(ad.WS, ad.O3, main = "Scastter plot by smoothed densities",xlab='WS', ylab='03'))
with(AirQual, smoothScatter( ad.O3, ad.WS, main = "Scastter plot by smoothed densities",xlab='03', ylab='WS'))
install.packages("hexbin")
library(hexbin)
with(AirQual, plot(hexbin(ad.O3, ad.WS, xbin=100),main = "Hexagona I binnging", xlab='03', ylab='WS' ))
with(AirQual, plot(hexbin(ad.O3, ad.WS, xbin=30),main = "Hexagona I binnging", xlab='03', ylab='WS' ))
install.packages("IDPmisc")
library(IDPmisc)
with(AirQual, iplot(ad.O3, ad.WS, xlab='03', ylab='WS', main = "image Scastter plot with \n color indicationg desity", ))
ipairs(subset(AirQual, select=c(ad.O3, ad.WS, ad.WD)))
install.packages(maps)
install.packages(mpatools)
install.packages("maps")
install.packages("mpatools")
library(ggplot2)
library(maps)
library(maptools)
library(maptools)
install.packages("maptools")
library(maptools)
library(maps)
library(maptools)
install.packages("maptools")
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
library(maptools)
library(maptools)
safty = read.csv("./data_2018_지역안전등급.csv", header = T)
safty = read.csv("data_2018_지역안전등급.csv", header = T)
safty = read.csv("D:\knou\R_Computing\data_2018_지역안전등급.csv", header = T)
safty = read.csv("D:\\knou\\R_Computing\\data_2018_지역안전등급.csv", header = T)
safty = read.csv("\\data_2018_지역안전등급.csv", header = T)
safty = read.csv(".\\data_2018_지역안전등급.csv", header = T)
safty = read.csv("./data_2018_지역안전등급.csv", header = T)
safty = read.csv('data_2018_지역안전등급.csv', header = T)
safty = read.csv('/data_2018_지역안전등급.csv', header = T)
safty = read.csv('./R_Computing/data_2018_지역안전등급.csv', header = T)
current_directory <- getwd()
print(current_directory)
setwd("D:/knou/R_Computing")
current_directory <- getwd()
print(current_directory)
safty = read.csv('/data_2018_지역안전등급.csv', header = T)
safty = read.csv('data_2018_지역안전등급.csv', header = T)
safty = read.csv('data_2018_지역안전등급.csv', header = T)
safty = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "UTf-8")
safty = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "ISO-8859-1")
safty
safty = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "UTF-8")
safty = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "CPR949")
safty = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "CP949")
safty
map <- read.csv('mapv2_final_seoul.csv', header=T, fileEncoding = "CP949")
map <- read.csv('mapv2_final_seoul.csv', header=T, fileEncoding = "UTF-8")
map
ggplot(safty.aes(map_id=region, fill=교통사고))
ggplot(safty,aes(map_id=region, fill=교통사고))
ggplot(safty,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colours-'snow4', size=0.1)
ggplot(safty,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colours='snow4', size=0.1)
ggplot(safty,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colour='snow4', size=0.1)
ggplot(safty,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3))
rlang::last_trace()
map
ggplot(safty,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3))
ggplot(safty,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colour = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
ggplot(safty,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
ggplot(safety,aes(map_id=region,fill=교통사고))+
geom_map(map=map,alpha=0.3, colour='snow4',size=0.1)+
theme(legend.position=c(0.9,0.3))+labs(title="교통사고안전등급")+
theme(plot.title=element_text(hjust=0.5))+
scale_fill_gradientn(colours=c('white','orange','red'))+
expand_limits(x=map$long,y=map$lat)+coord_fixed()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())+
theme(axis.ticks = element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("")+ xlim(80000,750000)
ggplot(safty,aes(map_id=region,fill=교통사고))+
geom_map(map=map,alpha=0.3, colour='snow4',size=0.1)+
theme(legend.position=c(0.9,0.3))+labs(title="교통사고안전등급")+
theme(plot.title=element_text(hjust=0.5))+
scale_fill_gradientn(colours=c('white','orange','red'))+
expand_limits(x=map$long,y=map$lat)+coord_fixed()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())+
theme(axis.ticks = element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("")+ xlim(80000,750000)
map <- read.csv('mapv2_final_seoul.csv', header=T, fileEncoding = "UTF-8")
map
safty = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "CP949")
safety = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "CP949")
safety
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
rlang::last_trace()
length(map)
source("D:/knou/R_Computing/chapter_14.R", echo=TRUE)
map_data <- read.csv('mapv2_final_seoul.csv', header=T, fileEncoding = "UTF-8")
map_data
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
ggplot(safty,aes(map_id=region,fill=교통사고))+
geom_map(map=map_data,alpha=0.3, colour='snow4',size=0.1)+
theme(legend.position=c(0.9,0.3))+labs(title="교통사고안전등급")+
theme(plot.title=element_text(hjust=0.5))+
scale_fill_gradientn(colours=c('white','orange','red'))+
expand_limits(x=map$long,y=map$lat)+coord_fixed()+
theme(axis.ticks = element_blank(), axis.text.y = element_blank())+
theme(axis.ticks = element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("")+ xlim(80000,750000)
rlang::last_trace()
region
map_data
safety
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map$region, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data$region, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
library(maps)
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
#2018년 전국지역안전등급 자료
safety = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "CP949")
safety
#통계지리정보서비스를 접속하여 우리나라의 행정 구역 지역 다운로드
map_data <- read.csv('mapv2_final_seoul.csv', header=T, fileEncoding = "UTF-8")
map_data
library(maptools)
#2018년 전국지역안전등급 자료
safety = read.csv('data_2018_지역안전등급.csv', header = T, fileEncoding = "CP949")
safety
#통계지리정보서비스를 접속하여 우리나라의 행정 구역 지역 다운로드
map_data <- read.csv('mapv2_final_seoul.csv', header=T, fileEncoding = "UTF-8")
map_data
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map$long, y=map$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
# 경도(longitude)와 위도(latitude)를 제대로 지정
ggplot(safety, aes(map_id = region, fill = 교통사고)) +
geom_map(map = map_data, alpha = 0.3, colour = 'snow4', size = 0.1) +
theme(legend.position = c(0.9, 0.3)) +
labs(title = "교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white", "orange", "red")) +
expand_limits(x = map_data$long, y = map_data$lat) +
coord_fixed() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank()) +
xlab("") + ylab("") +
xlim(min(map_data$long), max(map_data$long)) +
ylim(min(map_data$lat), max(map_data$lat))
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1) +
theme(legend.position = c(0.9,0.3)) + labs(title="교통사고안전등급") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradientn(colours = c("white","orange","red")) +
expand_limits(x=map_data$long, y=map_data$lat)+coord_fixed()+
theme(axis.ticks=element_blank(), axis.text.y = element_blank())+
theme(axis.ticks=element_blank(), axis.text.x = element_blank())+
xlab("")+ylab("") +xlim(80000,750000)
ggplot(safety,aes(map_id=region, fill=교통사고))
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1)
ggplot(safety,aes(map_id=region, fill=교통사고)) +
geom_map(map=map_data, alpha=0.3, colour='snow4', size=0.1)
install.packages("https://cran.r-project.org/	maptools_0.2-2.tar.gz")
install.packages("https://cran.r-project.org/maptools_0.2-2.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/Archive/maptools/maptools_0.2-2.tar.gz", repos = NULL, type = "source")
install.packages("https://cran.r-project.org/src/contrib/Archive/maptools/maptools_1.1-8.tar.gz")
